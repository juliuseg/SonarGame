#pragma kernel PackForReadback
#include "Includes/Structs.hlsl"

RWStructuredBuffer<uint2> _Header;
StructuredBuffer<MCTriangle> _GeneratedTriangles;
StructuredBuffer<SpawnPoint> _GeneratedSpawnPoints;
RWByteAddressBuffer _Combined;

int _TriangleStrideBytes;
int _SpawnPointStrideBytes;
int _HeaderBytes;
int _MaxTriangles;

ByteAddressBuffer _TriCountRaw;
ByteAddressBuffer _SpawnPointCountRaw;

uint GetTriCount()      { return _TriCountRaw.Load(0); }
uint GetSpawnPointCount(){ return _SpawnPointCountRaw.Load(0); }

[numthreads(128,1,1)]
void PackForReadback(uint3 id : SV_DispatchThreadID)
{
    if (id.x == 0)
    {
        uint triCountHdr = GetTriCount();
        uint spawnCount  = GetSpawnPointCount();
        uint biomeMask   = _Header[0].y;
        _Combined.Store(0,  triCountHdr);
        _Combined.Store(4,  biomeMask);
        _Combined.Store(8,  spawnCount);
        _Combined.Store(12, 0);
    }

    uint triCount = GetTriCount();
    uint spawnCount = GetSpawnPointCount();
    uint idx = id.x;

    // Write triangles
    if (idx < triCount)
    {
        uint dst = _HeaderBytes + idx * _TriangleStrideBytes;
        MCTriangle t = _GeneratedTriangles[idx];

        float4 g0 = float4(t.positionWS0.xyz, t.positionWS1.x);
        float4 g1 = float4(t.positionWS1.y, t.positionWS1.z, t.positionWS2.x, t.positionWS2.y);
        float4 g2 = float4(t.positionWS2.z, t.colorWS.x, t.colorWS.y, t.colorWS.z);

        _Combined.Store4(dst +  0, asuint(g0));
        _Combined.Store4(dst + 16, asuint(g1));
        _Combined.Store4(dst + 32, asuint(g2));
        return;
    }

    // Write spawn points (36 bytes total)
    uint spawnIdx = idx - triCount;
    if (spawnIdx >= spawnCount) return;

    uint spawnDst = _HeaderBytes +
                    triCount * _TriangleStrideBytes +
                    spawnIdx * _SpawnPointStrideBytes;

    SpawnPoint s = _GeneratedSpawnPoints[spawnIdx];

    // 0..31 bytes
    float4 s0 = float4(s.positionWS, s.normalWS.x);
    float4 s1 = float4(s.normalWS.y, s.normalWS.z, s.colorWS.x, s.colorWS.y);
    _Combined.Store4(spawnDst +  0, asuint(s0));
    _Combined.Store4(spawnDst + 16, asuint(s1));

    // 32..35 bytes (only colorWS.z)
    _Combined.Store(spawnDst + 32, asuint(s.colorWS.z));

}
